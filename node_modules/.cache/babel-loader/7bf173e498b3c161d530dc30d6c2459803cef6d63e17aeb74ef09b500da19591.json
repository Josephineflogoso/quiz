{"ast":null,"code":"var _jsxFileName = \"D:\\\\React JS App\\\\command\\\\src\\\\contexts\\\\quiz.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer } from \"react\";\nimport questions from \"../data\";\nimport { shuffleAnswers } from \"../helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  questions,\n  currentQuestionIndex: 0,\n  currentAnswer: \"\",\n  answers: shuffleAnswers(questions[0]),\n  showResults: false,\n  correctAnswersCount: 0\n};\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SELECT_ANSWER\":\n      {\n        const correctAnswersCount = action.payload === state.questions[state.currentQuestionIndex].correctAnswer ? state.correctAnswersCount + 1 : state.correctAnswersCount;\n        return {\n          ...state,\n          currentAnswer: action.payload,\n          correctAnswersCount\n        };\n      }\n    case \"NEXT_QUESTION\":\n      {\n        const showResults = state.currentQuestionIndex === state.questions.length - 1;\n        const currentQuestionIndex = showResults ? state.currentQuestionIndex : state.currentQuestionIndex + 1;\n        const answers = showResults ? [] : shuffleAnswers(state.questions[currentQuestionIndex]);\n        return {\n          ...state,\n          currentAnswer: \"\",\n          showResults,\n          currentQuestionIndex,\n          answers\n        };\n      }\n    case \"RESTART\":\n      {\n        return initialState;\n      }\n    default:\n      return state;\n  }\n};\nexport const QuizContext = /*#__PURE__*/createContext();\nexport const QuizProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const value = useReducer(reducer, initialState);\n  return /*#__PURE__*/_jsxDEV(QuizContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n};\n_s(QuizProvider, \"HDl9A1duRDI+maTNi9v2R1p+EwQ=\");\n_c = QuizProvider;\nvar _c;\n$RefreshReg$(_c, \"QuizProvider\");","map":{"version":3,"names":["React","createContext","useReducer","questions","shuffleAnswers","jsxDEV","_jsxDEV","initialState","currentQuestionIndex","currentAnswer","answers","showResults","correctAnswersCount","reducer","state","action","type","payload","correctAnswer","length","QuizContext","QuizProvider","_ref","_s","children","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React JS App/command/src/contexts/quiz.js"],"sourcesContent":["import React, { createContext, useReducer } from \"react\";\r\nimport questions from \"../data\";\r\nimport { shuffleAnswers } from \"../helpers\";\r\n\r\nconst initialState = {\r\n  questions,\r\n  currentQuestionIndex: 0,\r\n  currentAnswer: \"\",\r\n  answers: shuffleAnswers(questions[0]),\r\n  showResults: false,\r\n  correctAnswersCount: 0,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"SELECT_ANSWER\": {\r\n      const correctAnswersCount =\r\n        action.payload ===\r\n        state.questions[state.currentQuestionIndex].correctAnswer\r\n          ? state.correctAnswersCount + 1\r\n          : state.correctAnswersCount;\r\n      return {\r\n        ...state,\r\n        currentAnswer: action.payload,\r\n        correctAnswersCount,\r\n      };\r\n    }\r\n    case \"NEXT_QUESTION\": {\r\n      const showResults =\r\n        state.currentQuestionIndex === state.questions.length - 1;\r\n      const currentQuestionIndex = showResults\r\n        ? state.currentQuestionIndex\r\n        : state.currentQuestionIndex + 1;\r\n      const answers = showResults\r\n        ? []\r\n        : shuffleAnswers(state.questions[currentQuestionIndex]);\r\n      return {\r\n        ...state,\r\n        currentAnswer: \"\",\r\n        showResults,\r\n        currentQuestionIndex,\r\n        answers,\r\n      };\r\n    }\r\n    case \"RESTART\": {\r\n      return initialState;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const QuizContext = createContext();\r\n\r\nexport const QuizProvider = ({ children }) => {\r\n  const value = useReducer(reducer, initialState);\r\n\r\n  return <QuizContext.Provider value={value}>{children}</QuizContext.Provider>;\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACxD,OAAOC,SAAS,MAAM,SAAS;AAC/B,SAASC,cAAc,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,YAAY,GAAG;EACnBJ,SAAS;EACTK,oBAAoB,EAAE,CAAC;EACvBC,aAAa,EAAE,EAAE;EACjBC,OAAO,EAAEN,cAAc,CAACD,SAAS,CAAC,CAAC,CAAC,CAAC;EACrCQ,WAAW,EAAE,KAAK;EAClBC,mBAAmB,EAAE;AACvB,CAAC;AAED,MAAMC,OAAO,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACjC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,eAAe;MAAE;QACpB,MAAMJ,mBAAmB,GACvBG,MAAM,CAACE,OAAO,KACdH,KAAK,CAACX,SAAS,CAACW,KAAK,CAACN,oBAAoB,CAAC,CAACU,aAAa,GACrDJ,KAAK,CAACF,mBAAmB,GAAG,CAAC,GAC7BE,KAAK,CAACF,mBAAmB;QAC/B,OAAO;UACL,GAAGE,KAAK;UACRL,aAAa,EAAEM,MAAM,CAACE,OAAO;UAC7BL;QACF,CAAC;MACH;IACA,KAAK,eAAe;MAAE;QACpB,MAAMD,WAAW,GACfG,KAAK,CAACN,oBAAoB,KAAKM,KAAK,CAACX,SAAS,CAACgB,MAAM,GAAG,CAAC;QAC3D,MAAMX,oBAAoB,GAAGG,WAAW,GACpCG,KAAK,CAACN,oBAAoB,GAC1BM,KAAK,CAACN,oBAAoB,GAAG,CAAC;QAClC,MAAME,OAAO,GAAGC,WAAW,GACvB,EAAE,GACFP,cAAc,CAACU,KAAK,CAACX,SAAS,CAACK,oBAAoB,CAAC,CAAC;QACzD,OAAO;UACL,GAAGM,KAAK;UACRL,aAAa,EAAE,EAAE;UACjBE,WAAW;UACXH,oBAAoB;UACpBE;QACF,CAAC;MACH;IACA,KAAK,SAAS;MAAE;QACd,OAAOH,YAAY;MACrB;IACA;MACE,OAAOO,KAAK;EAAC;AAEnB,CAAC;AAED,OAAO,MAAMM,WAAW,gBAAGnB,aAAa,EAAE;AAE1C,OAAO,MAAMoB,YAAY,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACvC,MAAMG,KAAK,GAAGvB,UAAU,CAACW,OAAO,EAAEN,YAAY,CAAC;EAE/C,oBAAOD,OAAA,CAACc,WAAW,CAACM,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAD,QAAA,EAAEA;EAAQ;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAwB;AAC9E,CAAC;AAACP,EAAA,CAJWF,YAAY;AAAAU,EAAA,GAAZV,YAAY;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}